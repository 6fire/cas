package org.apereo.cas.configuration.model.support.wsfed

import org.apereo.cas.configuration.model.core.util.EncryptionJwtSigningJwtCryptographyProperties
import org.springframework.boot.context.properties.NestedConfigurationProperty

import java.io.Serializable

/**
 * This is [WsFederationProperties].
 *
 * @author Misagh Moayyed
 * @since 5.1.0
 */
class WsFederationProperties : Serializable {

    /**
     * Settings related to the wed-fed identity provider.
     */
    var idp = IdentityProvider()
    /**
     * Settings related to the we-fed security token service.
     */
    var sts = SecurityTokenService()

    class IdentityProvider : Serializable {
        /**
         * At this point, by default security token serviceâ€™s endpoint operate using a single
         * realm configuration and identity provider configuration is only able to recognize and request tokens for a single realm.
         * Registration of clients need to ensure this value is matched.
         */
        var realm = "urn:org:apereo:cas:ws:idp:realm-CAS"
        /**
         * Realm name.
         */
        var realmName = "CAS"

        companion object {
            private const val serialVersionUID = 5190493517277610788L
        }
    }

    class SecurityTokenService : Serializable {
        /**
         * When generating a SAML token, indicates the subject name-id format to use.
         */
        var subjectNameIdFormat = "unspecified"
        /**
         * Whether tokens generated by STS should encrypted.
         */
        var isEncryptTokens = true

        /**
         * Keystore path used to sign tokens.
         */
        var signingKeystoreFile: String? = null
        /**
         * Keystore password used to sign tokens.
         */
        var signingKeystorePassword: String? = null
        /**
         * Keystore path used to encrypt tokens.
         */
        var encryptionKeystoreFile: String? = null
        /**
         * Keystore password used to encrypt tokens.
         */
        var encryptionKeystorePassword: String? = null

        /**
         * Crypto settings used to secure calls between the idp and the sts.
         */
        @NestedConfigurationProperty
        var crypto = EncryptionJwtSigningJwtCryptographyProperties()

        /**
         * Realm definition settings that define this CAS server.
         */
        var realm = RealmDefinition()

        class RealmDefinition : Serializable {
            /**
             * Keystore path associated with the this realm.
             */
            var keystoreFile: String? = null
            /**
             * Keystore password associated with the this realm.
             */
            var keystorePassword: String? = null
            /**
             * Key alias associated with the this realm.
             */
            var keystoreAlias: String? = null
            /**
             * Key alias associated with the this realm.
             */
            var keyPassword: String? = null
            /**
             * Issuer/name of the realm identified and registered with STS.
             */
            var issuer = "CAS"

            companion object {
                private const val serialVersionUID = -2209230334376432934L
            }
        }

        companion object {
            private const val serialVersionUID = -1155140161252595793L
        }
    }

    companion object {
        private const val serialVersionUID = -8679379856243224647L
    }
}
